
config.program     = "scsynth"  // valid path here
config.transport   = TCP
boot()

// analog bubbles
val x = play {
   val f = LFSaw.kr(0.4).madd(24, LFSaw.kr(List(8, 7.23)).madd(3, 80)).midicps // glissando function
   CombN.ar(SinOsc.ar(f)*0.04, 0.2, 0.2, 4) // echoing sine wave
}

// bus plotter
val b = new AudioBus(s, s.config.outputBusChannels, 1) // microphone
b.gui.waveform(duration = 2)

x release 10

// function plotter
val x = graph {
   val f = LFSaw.kr(0.4).madd(24, LFSaw.kr(List(8, 7.23)).madd(3, 80)).midicps // glissando function
   CombN.ar(SinOsc.ar(f)*0.04, 0.2, 0.2, 4) // echoing sine wave
}

x.gui.waveform(duration = 2)

// node tree
s.defaultGroup.gui.tree()

// meters
s.gui.meter()
b.gui.meter()

val dfx = SynthDef("AnalogBubbles") {
   val f1 = "freq1".kr(0.4)
   val f2 = "freq2".kr(8)
   val d  = "detune".kr(0.90375)
   val f = LFSaw.ar(f1).madd(24, LFSaw.ar(List(f2, f2*d)).madd(3, 80)).midicps // glissando function
   val x = CombN.ar(SinOsc.ar(f)*0.04, 0.2, 0.2, 4) // echoing sine wave
   Out.ar( 0, x )
}
val x = dfx.play(args = List("freq2" -> 222.2))
x.set("freq1" -> 0.1)
x.set("detune" -> 0.44)

x run false
x run true

val y = play(target = x, addAction = addAfter) {
  ReplaceOut.ar(0, In.ar(0, 2) * SinOsc.ar("freq".kr(1), Pi/4))
}

y.set("freq" -> 10)
s.freeAll()

dfx.gui.diagram()